
--- File: .\app.py ---
from flask import Flask, request, jsonify, render_template
from flask_migrate import Migrate
from models import db, Propiedad, Cliente
import os

# Inicializa la aplicación Flask
app = Flask(__name__)

# Configuración de la base de datos SQLite
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///inmobiliaria.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Inicializa SQLAlchemy con la app
db.init_app(app)

# Inicia la extensión Flask-Migrate
migrate = Migrate(app, db)

# Crear directorio templates si no existe
if not os.path.exists('templates'):
    os.makedirs('templates')

# Crear directorio static si no existe
if not os.path.exists('static'):
    os.makedirs('static')

# Ruta principal con la nueva interfaz simplificada
@app.route('/')
def index():
    return render_template('index.html')

# Rutas API para propiedades
@app.route('/api/propiedades', methods=['GET'])
def get_propiedades():
    tipo = request.args.get('tipo', '')
    propietario = request.args.get('propietario', '')
    interesado = request.args.get('interesado', '')

    query = Propiedad.query
    if tipo:
        query = query.filter(Propiedad.tipo.ilike(f'%{tipo}%'))
    if propietario:
        query = query.join(Cliente, Propiedad.propietario).filter(Cliente.nombre.ilike(f'%{propietario}%'))
    if interesado:
        query = query.join(Propiedad.interesados).filter(Cliente.nombre.ilike(f'%{interesado}%'))
    
    propiedades = query.all()
    return jsonify([prop.as_dict() for prop in propiedades])

# Ruta para agregar propiedad
@app.route('/api/propiedades', methods=['POST'])
def add_propiedad():
    data = request.get_json()
    nueva_propiedad = Propiedad(
        direccion=data['direccion'],
        precio=data['precio'],
        tipo=data['tipo'],
        estado=data['estado'],
        descripcion=data.get('descripcion', ''),
        propietario_id=data.get('propietario_id')  # Nuevo: ID del propietario
    )
    # Agregar interesados si se pasan
    if 'interesados_ids' in data:
        interesados = Cliente.query.filter(Cliente.id.in_(data['interesados_ids'])).all()
        nueva_propiedad.interesados = interesados
    db.session.add(nueva_propiedad)
    db.session.commit()
    return jsonify(nueva_propiedad.as_dict()), 201

@app.route('/api/propiedades/<int:id>', methods=['GET'])
def get_propiedad(id):
    propiedad = Propiedad.query.get(id)
    if propiedad:
        return jsonify(propiedad.as_dict())
    return jsonify({"message": "Propiedad no encontrada"}), 404

# Ruta para actualizar propiedad
@app.route('/api/propiedades/<int:id>', methods=['PUT'])
def update_propiedad(id):
    propiedad = Propiedad.query.get(id)
    if propiedad:
        data = request.get_json()
        propiedad.direccion = data['direccion']
        propiedad.precio = data['precio']
        propiedad.tipo = data['tipo']
        propiedad.estado = data['estado']
        propiedad.descripcion = data.get('descripcion', '')
        propiedad.propietario_id = data.get('propietario_id')  # Actualizar propietario
        # Actualizar interesados
        if 'interesados_ids' in data:
            interesados = Cliente.query.filter(Cliente.id.in_(data['interesados_ids'])).all()
            propiedad.interesados = interesados
        db.session.commit()
        return jsonify({"message": "Propiedad actualizada"})
    return jsonify({"message": "Propiedad no encontrada"}), 404

@app.route('/api/propiedades/<int:id>', methods=['DELETE'])
def delete_propiedad(id):
    propiedad = Propiedad.query.get(id)
    if propiedad:
        db.session.delete(propiedad)
        db.session.commit()
        return jsonify({"message": "Propiedad eliminada"})
    return jsonify({"message": "Propiedad no encontrada"}), 404

# Rutas API para clientes
@app.route('/api/clientes', methods=['GET'])
def get_clientes():
    clientes = Cliente.query.all()
    return jsonify([cliente.as_dict() for cliente in clientes])

@app.route('/api/clientes', methods=['POST'])
def add_cliente():
    data = request.get_json()
    nuevo_cliente = Cliente(
        nombre=data['nombre'],
        contacto=data['contacto'],
        tipo=data['tipo']
    )
    db.session.add(nuevo_cliente)
    db.session.commit()
    return jsonify(nuevo_cliente.as_dict()), 201

@app.route('/api/clientes/<int:id>', methods=['GET'])
def get_cliente(id):
    cliente = Cliente.query.get(id)
    if cliente:
        return jsonify(cliente.as_dict())
    return jsonify({"message": "Cliente no encontrado"}), 404

@app.route('/api/clientes/<int:id>', methods=['PUT'])
def update_cliente(id):
    cliente = Cliente.query.get(id)
    if cliente:
        data = request.get_json()
        cliente.nombre = data['nombre']
        cliente.contacto = data['contacto']
        cliente.tipo = data['tipo']
        db.session.commit()
        return jsonify({"message": "Cliente actualizado"})
    return jsonify({"message": "Cliente no encontrado"}), 404

@app.route('/api/clientes/<int:id>', methods=['DELETE'])
def delete_cliente(id):
    cliente = Cliente.query.get(id)
    if cliente:
        db.session.delete(cliente)
        db.session.commit()
        return jsonify({"message": "Cliente eliminado"})
    return jsonify({"message": "Cliente no encontrado"}), 404

# Crea las tablas en la base de datos si no existen
with app.app_context():
    db.create_all()

# Ejecuta el servidor Flask en modo depuración
if __name__ == '__main__':
    app.run(debug=True)

--- File: .\combine_files.py ---
# Save this as combine_files.py in Z:\programming\Dad\
import os

root_folder = '.'  # Current directory (Z:\programming\Dad)
output_file = 'all_code.txt'

# Extensions to include (adjust as needed)
valid_extensions = ('.py', '.html', '.css', '.js')

def combine_files(directory, output):
    with open(output, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(directory):
            # Skip unwanted folders
            if any(exclude in root for exclude in ('venv', '__pycache__', 'instance', 'migrations')):
                continue
            for file in files:
                if file.endswith(valid_extensions):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as infile:
                            outfile.write(f'\n--- File: {file_path} ---\n')
                            outfile.write(infile.read())
                            outfile.write('\n')
                        print(f"Added: {file_path}")
                    except Exception as e:
                        print(f"Skipped {file_path}: {str(e)}")

combine_files(root_folder, output_file)
print(f"All files combined into {output_file}")

--- File: .\manage.py ---
# manage.py
import sys
from app import app, db
from flask_migrate import Migrate, init, migrate, upgrade

# Configura Flask-Migrate
migrate_obj = Migrate(app, db)  # Renombré a migrate_obj para evitar confusión

if __name__ == "__main__":
    with app.app_context():
        if len(sys.argv) > 1 and sys.argv[1] == "db":
            if len(sys.argv) > 2:
                command = sys.argv[2]
                if command == "init":
                    init()
                elif command == "migrate":
                    migrate()
                elif command == "upgrade":
                    upgrade()
                else:
                    print("Comando no reconocido. Usa: init, migrate, upgrade")
            else:
                print("Uso: python manage.py db [init|migrate|upgrade]")
        else:
            print("Uso: python manage.py db [init|migrate|upgrade]")

--- File: .\models.py ---
# models.py
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

# Tabla intermedia para la relación muchos-a-muchos entre Propiedad e interesados (Clientes)
interesados_propiedades = db.Table('interesados_propiedades',
    db.Column('propiedad_id', db.Integer, db.ForeignKey('propiedades.id'), primary_key=True),
    db.Column('cliente_id', db.Integer, db.ForeignKey('clientes.id'), primary_key=True)
)

# Modelo para las propiedades
class Propiedad(db.Model):
    __tablename__ = 'propiedades'
    id = db.Column(db.Integer, primary_key=True, index=True)
    direccion = db.Column(db.String, index=True)
    precio = db.Column(db.Float)
    tipo = db.Column(db.String)
    estado = db.Column(db.String)
    descripcion = db.Column(db.String)
    # Relación con el propietario (un Cliente)
    # En models.py, modificá la línea de propietario_id
    propietario_id = db.Column(db.Integer, db.ForeignKey('clientes.id', name='fk_propiedades_propietario_id'), nullable=True)
    propietario = db.relationship('Cliente', backref='propiedades', foreign_keys=[propietario_id])
    # Relación con los interesados (muchos Clientes)
    interesados = db.relationship('Cliente', secondary=interesados_propiedades, backref='intereses')

    def as_dict(self):
        return {
            'id': self.id,
            'direccion': self.direccion,
            'precio': self.precio,
            'tipo': self.tipo,
            'estado': self.estado,
            'descripcion': self.descripcion,
            'propietario': self.propietario.nombre if self.propietario else None,
            'interesados': [cliente.nombre for cliente in self.interesados]
        }

# Modelo para los clientes
class Cliente(db.Model):
    __tablename__ = 'clientes'
    id = db.Column(db.Integer, primary_key=True, index=True)
    nombre = db.Column(db.String, index=True)
    contacto = db.Column(db.String)
    tipo = db.Column(db.String)

    def as_dict(self):
        return {
            'id': self.id,
            'nombre': self.nombre,
            'contacto': self.contacto,
            'tipo': self.tipo
        }

--- File: .\templates\index.html ---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión Inmobiliaria</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .container { max-width: 800px; }
        .form-section { margin-bottom: 20px; }
        .list-section { margin-top: 20px; }
        table { font-size: 14px; }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="text-center mb-4">Gestión Inmobiliaria</h1>

        <!-- Selector de acción -->
        <div class="form-section">
            <label for="accion" class="form-label fw-bold">¿Qué querés cargar?</label>
            <select id="accion" class="form-select mb-3" onchange="mostrarFormulario()">
                <option value="propiedad">Cargar Propiedad</option>
                <option value="cliente">Cargar Cliente</option>
            </select>

            <!-- Formulario para Propiedad -->
            <form id="formPropiedad" class="form-section">
                <div class="mb-3">
                    <label for="direccion" class="form-label">Dirección</label>
                    <input type="text" class="form-control" id="direccion" required>
                </div>
                <div class="mb-3">
                    <label for="precio" class="form-label">Precio</label>
                    <input type="number" class="form-control" id="precio" required>
                </div>
                <div class="mb-3">
                    <label for="tipo" class="form-label">Tipo</label>
                    <select class="form-select" id="tipo" required>
                        <option value="Venta">Venta</option>
                        <option value="Alquiler">Alquiler</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="estado" class="form-label">Estado</label>
                    <select class="form-select" id="estado" required>
                        <option value="Disponible">Disponible</option>
                        <option value="Reservado">Reservado</option>
                        <option value="Vendido">Vendido</option>
                        <option value="Alquilado">Alquilado</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="propietario" class="form-label">Propietario</label>
                    <select class="form-select" id="propietario">
                        <option value="">Sin propietario</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="interesados" class="form-label">Interesados</label>
                    <select class="form-select" id="interesados" multiple>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary w-100">Guardar Propiedad</button>
            </form>

            <!-- Formulario para Cliente -->
            <form id="formCliente" class="form-section" style="display: none;">
                <div class="mb-3">
                    <label for="nombre" class="form-label">Nombre</label>
                    <input type="text" class="form-control" id="nombre" required>
                </div>
                <div class="mb-3">
                    <label for="contacto" class="form-label">Contacto (teléfono o email)</label>
                    <input type="text" class="form-control" id="contacto" required>
                </div>
                <div class="mb-3">
                    <label for="tipoCliente" class="form-label">Tipo</label>
                    <select class="form-select" id="tipoCliente" required>
                        <option value="propietario">Propietario</option>
                        <option value="interesado">Interesado</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary w-100">Guardar Cliente</button>
            </form>
        </div>

        <!-- Lista de propiedades cargadas -->
        <div class="list-section">
            <h3>Propiedades Cargadas</h3>
            <table class="table table-striped" id="tablaPropiedades">
                <thead>
                    <tr>
                        <th>Dirección</th>
                        <th>Precio</th>
                        <th>Tipo</th>
                        <th>Estado</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let propiedades = [];
        let clientes = [];
    
        // Cargar clientes para los selects
        function cargarClientes() {
            fetch('/api/clientes')
                .then(response => response.json())
                .then(data => {
                    clientes = data;
                    const propietarioSelect = document.getElementById('propietario');
                    const interesadosSelect = document.getElementById('interesados');
                    propietarioSelect.innerHTML = '<option value="">Sin propietario</option>';
                    interesadosSelect.innerHTML = '';
                    clientes.forEach(cliente => {
                        propietarioSelect.innerHTML += `<option value="${cliente.id}">${cliente.nombre}</option>`;
                        interesadosSelect.innerHTML += `<option value="${cliente.id}">${cliente.nombre}</option>`;
                    });
                })
                .catch(error => console.error('Error al cargar clientes:', error));
        }
    
        // Mostrar el formulario correcto según la selección
        function mostrarFormulario() {
            const accion = document.getElementById('accion').value;
            document.getElementById('formPropiedad').style.display = accion === 'propiedad' ? 'block' : 'none';
            document.getElementById('formCliente').style.display = accion === 'cliente' ? 'block' : 'none';
        }
    
        // Cargar propiedades y clientes al iniciar
        document.addEventListener('DOMContentLoaded', () => {
            cargarPropiedades();
            cargarClientes();
            document.getElementById('formPropiedad').addEventListener('submit', guardarPropiedad);
            document.getElementById('formCliente').addEventListener('submit', guardarCliente);
        });
    
        // Cargar propiedades
        function cargarPropiedades() {
            fetch('/api/propiedades')
                .then(response => response.json())
                .then(data => {
                    propiedades = data;
                    mostrarPropiedades();
                })
                .catch(error => console.error('Error al cargar propiedades:', error));
        }
    
        // Mostrar propiedades en la tabla
        function mostrarPropiedades() {
            const tbody = document.querySelector('#tablaPropiedades tbody');
            tbody.innerHTML = '';
            propiedades.forEach(prop => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${prop.direccion}</td>
                    <td>$${prop.precio.toLocaleString()}</td>
                    <td>${prop.tipo}</td>
                    <td>${prop.estado}</td>
                    <td>${prop.propietario || 'Sin propietario'}</td>
                    <td>${prop.interesados.join(', ') || 'Ninguno'}</td>
                `;
                tbody.appendChild(row);
            });
        }
    
        // Guardar propiedad
        function guardarPropiedad(e) {
            e.preventDefault();
            const propiedad = {
                direccion: document.getElementById('direccion').value,
                precio: parseFloat(document.getElementById('precio').value),
                tipo: document.getElementById('tipo').value,
                estado: document.getElementById('estado').value,
                propietario_id: document.getElementById('propietario').value || null,
                interesados_ids: Array.from(document.getElementById('interesados').selectedOptions).map(opt => parseInt(opt.value))
            };
    
            fetch('/api/propiedades', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(propiedad)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('formPropiedad').reset();
                cargarPropiedades();
                alert('Propiedad guardada');
            })
            .catch(error => console.error('Error al guardar propiedad:', error));
        }
    
        // Guardar cliente
        function guardarCliente(e) {
            e.preventDefault();
            const cliente = {
                nombre: document.getElementById('nombre').value,
                contacto: document.getElementById('contacto').value,
                tipo: document.getElementById('tipoCliente').value
            };
    
            fetch('/api/clientes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cliente)
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('formCliente').reset();
                cargarClientes();
                alert('Cliente guardado');
            })
            .catch(error => console.error('Error al guardar cliente:', error));
        }
    </script>
</body>
</html>
