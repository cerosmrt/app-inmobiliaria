
--- File: .\app.py ---
from flask import Flask, request, jsonify, render_template
from flask_migrate import Migrate
from models import db, Propiedad, Cliente
import os
from werkzeug.utils import secure_filename

# Inicializa la aplicación Flask
app = Flask(__name__)

# Configuración de la base de datos SQLite
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///inmobiliaria.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Configuración para subir fotos
UPLOAD_FOLDER = 'static/uploads'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Inicializa SQLAlchemy con la app
db.init_app(app)

# Inicia la extensión Flask-Migrate
migrate = Migrate(app, db)

# Crear directorio templates si no existe
if not os.path.exists('templates'):
    os.makedirs('templates')

# Crear directorio static si no existe
if not os.path.exists('static'):
    os.makedirs('static')

# Ruta principal con la nueva interfaz simplificada
@app.route('/')
def index():
    return render_template('index.html')

# Rutas API para propiedades
@app.route('/api/propiedades', methods=['GET'])
def get_propiedades():
    tipo = request.args.get('tipo', '')
    propietario = request.args.get('propietario', '')
    interesado = request.args.get('interesado', '')

    query = Propiedad.query
    if tipo:
        query = query.filter(Propiedad.tipo.ilike(f'%{tipo}%'))
    if propietario:
        query = query.join(Cliente, Propiedad.propietario).filter(Cliente.nombre.ilike(f'%{propietario}%'))
    if interesado:
        query = query.join(Propiedad.interesados).filter(Cliente.nombre.ilike(f'%{interesado}%'))
    
    propiedades = query.all()
    return jsonify([prop.as_dict() for prop in propiedades])

@app.route('/api/propiedades', methods=['POST'])
def add_propiedad():
    data = request.get_json()
    nueva_propiedad = Propiedad(
        direccion=data['direccion'],
        rango_min=data['rango_min'],
        rango_max=data['rango_max'],
        es_usd=data.get('es_usd', False),
        ambientes=data.get('ambientes'),
        tipo=data['tipo'],
        estado=data['estado'],
        propietario_id=data.get('propietario_id')
    )
    if 'interesados_ids' in data:
        interesados = Cliente.query.filter(Cliente.id.in_(data['interesados_ids'])).all()
        nueva_propiedad.interesados = interesados
    db.session.add(nueva_propiedad)
    db.session.commit()
    return jsonify(nueva_propiedad.as_dict()), 201

@app.route('/api/propiedades/<int:id>', methods=['GET'])
def get_propiedad(id):
    propiedad = Propiedad.query.get(id)
    if propiedad:
        return jsonify(propiedad.as_dict())
    return jsonify({"message": "Propiedad no encontrada"}), 404

@app.route('/api/propiedades/<int:id>', methods=['PUT'])
def update_propiedad(id):
    propiedad = Propiedad.query.get(id)
    if propiedad:
        data = request.get_json()
        propiedad.direccion = data['direccion']
        propiedad.rango_min = data['rango_min']
        propiedad.rango_max = data['rango_max']
        propiedad.es_usd = data.get('es_usd', False)
        propiedad.ambientes = data.get('ambientes')
        propiedad.tipo = data['tipo']
        propiedad.estado = data['estado']
        propiedad.propietario_id = data.get('propietario_id')
        if 'interesados_ids' in data:
            interesados = Cliente.query.filter(Cliente.id.in_(data['interesados_ids'])).all()
            propiedad.interesados = interesados
        db.session.commit()
        return jsonify({"message": "Propiedad actualizada"})
    return jsonify({"message": "Propiedad no encontrada"}), 404

@app.route('/api/propiedades/<int:id>', methods=['DELETE'])
def delete_propiedad(id):
    propiedad = Propiedad.query.get(id)
    if propiedad:
        db.session.delete(propiedad)
        db.session.commit()
        return jsonify({"message": "Propiedad eliminada"})
    return jsonify({"message": "Propiedad no encontrada"}), 404

# Rutas API para clientes
@app.route('/api/clientes', methods=['GET'])
def get_clientes():
    clientes = Cliente.query.all()
    return jsonify([cliente.as_dict() for cliente in clientes])

@app.route('/api/clientes', methods=['POST'])
def add_cliente():
    data = request.get_json()
    nuevo_cliente = Cliente(
        nombre=data['nombre'],
        apellido=data['apellido'],
        telefono=data['telefono'],
        email=data.get('email'),
        tipo=data['tipo'],
        rango_min=data.get('rango_min'),
        rango_max=data.get('rango_max'),
        es_usd=data.get('es_usd', False),
        ambientes=data.get('ambientes'),
        operacion=data.get('operacion'),
        descripcion=data.get('descripcion', '')
    )
    db.session.add(nuevo_cliente)
    db.session.commit()
    return jsonify(nuevo_cliente.as_dict()), 201

@app.route('/api/clientes/<int:id>', methods=['GET'])
def get_cliente(id):
    cliente = Cliente.query.get(id)
    if cliente:
        return jsonify(cliente.as_dict())
    return jsonify({"message": "Cliente no encontrado"}), 404

@app.route('/api/clientes/<int:id>', methods=['PUT'])
def update_cliente(id):
    cliente = Cliente.query.get(id)
    if cliente:
        data = request.get_json()
        cliente.nombre = data['nombre']
        cliente.apellido = data['apellido']
        cliente.telefono = data['telefono']
        cliente.email = data.get('email')
        cliente.tipo = data['tipo']
        cliente.rango_min = data.get('rango_min')
        cliente.rango_max = data.get('rango_max')
        cliente.es_usd = data.get('es_usd', False)
        cliente.ambientes = data.get('ambientes')
        cliente.operacion = data.get('operacion')
        cliente.descripcion = data.get('descripcion')
        db.session.commit()
        return jsonify({"message": "Cliente actualizado"})
    return jsonify({"message": "Cliente no encontrado"}), 404

@app.route('/api/clientes/<int:id>', methods=['DELETE'])
def delete_cliente(id):
    cliente = Cliente.query.get(id)
    if cliente:
        db.session.delete(cliente)
        db.session.commit()
        return jsonify({"message": "Cliente eliminado"})
    return jsonify({"message": "Cliente no encontrado"}), 404

@app.route('/api/clientes/<int:id>/upload', methods=['POST'])
def upload_foto(id):
    cliente = Cliente.query.get(id)
    if not cliente:
        return jsonify({"message": "Cliente no encontrado"}), 404
    
    if 'file' not in request.files:
        return jsonify({"message": "No se envió archivo"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"message": "Archivo vacío"}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], f"{id}_{filename}")
        file.save(filepath)
        
        if cliente.fotos:
            cliente.fotos += f",{filepath}"
        else:
            cliente.fotos = filepath
        db.session.commit()
        return jsonify(cliente.as_dict()), 200
    
    return jsonify({"message": "Formato no permitido"}), 400

@app.route('/cliente/<int:id>')
def cliente_perfil(id):
    return render_template('perfil.html', cliente_id=id)

# Crea las tablas en la base de datos si no existen
with app.app_context():
    db.create_all()

# Ejecuta el servidor Flask en modo depuración
if __name__ == '__main__':
    app.run(debug=True)

--- File: .\combine_files.py ---
# Save this as combine_files.py in Z:\programming\Dad\
import os

root_folder = '.'  # Current directory (Z:\programming\Dad)
output_file = 'all_code.txt'

# Extensions to include (adjust as needed)
valid_extensions = ('.py', '.html', '.css', '.js')

def combine_files(directory, output):
    with open(output, 'w', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(directory):
            # Skip unwanted folders
            if any(exclude in root for exclude in ('venv', '__pycache__', 'instance', 'migrations')):
                continue
            for file in files:
                if file.endswith(valid_extensions):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as infile:
                            outfile.write(f'\n--- File: {file_path} ---\n')
                            outfile.write(infile.read())
                            outfile.write('\n')
                        print(f"Added: {file_path}")
                    except Exception as e:
                        print(f"Skipped {file_path}: {str(e)}")

combine_files(root_folder, output_file)
print(f"All files combined into {output_file}")

--- File: .\manage.py ---
# manage.py
import sys
from app import app, db
from flask_migrate import Migrate, init, migrate, upgrade

# Configura Flask-Migrate
migrate_obj = Migrate(app, db)  # Renombré a migrate_obj para evitar confusión

if __name__ == "__main__":
    with app.app_context():
        if len(sys.argv) > 1 and sys.argv[1] == "db":
            if len(sys.argv) > 2:
                command = sys.argv[2]
                if command == "init":
                    init()
                elif command == "migrate":
                    migrate()
                elif command == "upgrade":
                    upgrade()
                else:
                    print("Comando no reconocido. Usa: init, migrate, upgrade")
            else:
                print("Uso: python manage.py db [init|migrate|upgrade]")
        else:
            print("Uso: python manage.py db [init|migrate|upgrade]")

--- File: .\models.py ---
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

# Tabla intermedia para la relación muchos-a-muchos entre Propiedad e interesados (Clientes)
interesados_propiedades = db.Table('interesados_propiedades',
    db.Column('propiedad_id', db.Integer, db.ForeignKey('propiedades.id'), primary_key=True),
    db.Column('cliente_id', db.Integer, db.ForeignKey('clientes.id'), primary_key=True)
)

# Modelo para las propiedades
class Propiedad(db.Model):
    __tablename__ = 'propiedades'
    id = db.Column(db.Integer, primary_key=True, index=True)
    direccion = db.Column(db.String, index=True)
    rango_min = db.Column(db.Float, nullable=True)
    rango_max = db.Column(db.Float, nullable=True)
    es_usd = db.Column(db.Boolean, default=False)
    ambientes = db.Column(db.Integer, nullable=True)
    tipo = db.Column(db.String)
    estado = db.Column(db.String)
    propietario_id = db.Column(db.Integer, db.ForeignKey('clientes.id'), nullable=True)
    propietario = db.relationship('Cliente', backref='propiedades', foreign_keys=[propietario_id])
    interesados = db.relationship('Cliente', secondary=interesados_propiedades, backref='intereses')

    def as_dict(self):
        return {
            'id': self.id,
            'direccion': self.direccion,
            'rango_min': self.rango_min,
            'rango_max': self.rango_max,
            'es_usd': self.es_usd,
            'ambientes': self.ambientes,
            'tipo': self.tipo,
            'estado': self.estado,
            'propietario': self.propietario.nombre + ' ' + self.propietario.apellido if self.propietario else None,
            'interesados': [c.nombre + ' ' + c.apellido for c in self.interesados]
        }

# Modelo para los clientes
class Cliente(db.Model):
    __tablename__ = 'clientes'
    id = db.Column(db.Integer, primary_key=True, index=True)
    nombre = db.Column(db.String, nullable=False)
    apellido = db.Column(db.String, nullable=False)
    telefono = db.Column(db.String, nullable=False)
    email = db.Column(db.String, nullable=True)
    tipo = db.Column(db.String, nullable=False)
    rango_min = db.Column(db.Float, nullable=True)
    rango_max = db.Column(db.Float, nullable=True)
    es_usd = db.Column(db.Boolean, default=False)
    ambientes = db.Column(db.Integer, nullable=True)
    operacion = db.Column(db.String, nullable=True)
    descripcion = db.Column(db.Text, nullable=True)
    fotos = db.Column(db.String, nullable=True)

    def as_dict(self):
        return {
            'id': self.id,
            'nombre': self.nombre,
            'apellido': self.apellido,
            'telefono': self.telefono,
            'email': self.email,
            'tipo': self.tipo,
            'rango_min': self.rango_min,
            'rango_max': self.rango_max,
            'es_usd': self.es_usd,
            'ambientes': self.ambientes,
            'operacion': self.operacion,
            'descripcion': self.descripcion,
            'fotos': self.fotos.split(',') if self.fotos else []
        }

--- File: .\templates\index.html ---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión Clientes</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 10px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 {
            font-size: 20px;
            text-align: center;
            margin-bottom: 10px;
        }
        .btn-add {
            font-size: 12px;
            padding: 4px 8px;
            background-color: #28a745;
            color: white;
            border: none;
            cursor: pointer;
            margin-bottom: 5px;
        }
        .filterbox {
            margin-bottom: 10px;
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .filterbox input, .filterbox select {
            font-size: 12px;
            padding: 2px;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 4px;
            text-align: left;
        }
        th {
            background-color: #e0e0e0;
            font-weight: bold;
        }
        .editable-text:hover {
            background-color: #e9ecef;
            cursor: pointer;
        }
        .editable-select:hover {
            background-color: #e9ecef;
            cursor: pointer;
        }
        .edit-container {
            display: flex;
            align-items: center;
            gap: 2px;
        }
        input, select {
            font-size: 12px;
            padding: 2px;
            border: 1px solid #ccc;
            width: 100%;
            box-sizing: border-box;
        }
        .new-row {
            background-color: #d4edda;
        }
        .btn-action {
            font-size: 10px;
            padding: 2px 4px;
            border: none;
            cursor: pointer;
        }
        .btn-save {
            background-color: #28a745;
            color: white;
        }
        .btn-cancel {
            background-color: #dc3545;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Gestión Clientes</h1>
        <button class="btn-add" onclick="agregarFilaCliente()">Añadir cliente</button>
        <button class="btn-add" onclick="imprimirTabla()">Imprimir</button>

        <div class="filterbox">
            <input type="text" id="filtroTexto" placeholder="Nombre o Apellido" onkeyup="filtrarClientes()">
            <select id="filtroOperacion" onchange="filtrarClientes()">
                <option value="">Operación</option>
                <option value="venta">Venta</option>
                <option value="renta">Renta</option>
                <option value="ambas">Ambas</option>
            </select>
            <input type="number" id="filtroAmbientes" placeholder="Ambientes" onkeyup="filtrarClientes()">
        </div>

        <table id="tablaClientes">
            <thead>
                <tr>
                    <th>Cliente</th>
                    <th>Teléfono</th>
                    <th>Email</th>
                    <th>Tipo</th>
                    <th>Min</th>
                    <th>Max</th>
                    <th>USD</th>
                    <th>Amb</th>
                    <th>Op</th>
                    <th>Acc</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <script>
        let clientes = [];

        // Cargar clientes
        function cargarClientes() {
            fetch('/api/clientes')
                .then(response => response.json())
                .then(data => {
                    clientes = data;
                    filtrarClientes(); // Mostrar con filtros aplicados desde el arranque
                });
        }

        // Mostrar clientes con filtros
        function filtrarClientes() {
            const texto = document.getElementById('filtroTexto').value.toLowerCase();
            const operacion = document.getElementById('filtroOperacion').value;
            const ambientes = document.getElementById('filtroAmbientes').value;

            const clientesFiltrados = clientes.filter(cliente => {
                const matchTexto = cliente.nombre.toLowerCase().includes(texto) || cliente.apellido.toLowerCase().includes(texto);
                const matchOperacion = !operacion || cliente.operacion === operacion;
                const matchAmbientes = !ambientes || cliente.ambientes == ambientes;
                return matchTexto && matchOperacion && matchAmbientes;
            });

            const tbody = document.querySelector('#tablaClientes tbody');
            tbody.innerHTML = '';
            clientesFiltrados.forEach(cliente => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <a href="/cliente/${cliente.id}" class="editable-text" data-field="nombre" data-id="${cliente.id}">
                            ${cliente.nombre} ${cliente.apellido}
                        </a>
                    </td>
                    <td class="editable-text" data-field="telefono" data-id="${cliente.id}">${cliente.telefono}</td>
                    <td class="editable-text" data-field="email" data-id="${cliente.id}">${cliente.email || ''}</td>
                    <td class="editable-select" data-field="tipo" data-id="${cliente.id}">${cliente.tipo}</td>
                    <td class="editable-text" data-field="rango_min" data-id="${cliente.id}">${cliente.rango_min || ''}</td>
                    <td class="editable-text" data-field="rango_max" data-id="${cliente.id}">${cliente.rango_max || ''}</td>
                    <td><input type="checkbox" data-field="es_usd" data-id="${cliente.id}" ${cliente.es_usd ? 'checked' : ''} onchange="actualizarDato(${cliente.id}, 'es_usd', this.checked, 'tablaClientes')"></td>
                    <td class="editable-text" data-field="ambientes" data-id="${cliente.id}">${cliente.ambientes || ''}</td>
                    <td class="editable-select" data-field="operacion" data-id="${cliente.id}">${cliente.operacion || ''}</td>
                    <td>
                        <button class="btn-action btn-cancel" onclick="eliminarCliente(${cliente.id})">X</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            agregarEventosEdicionTexto('tablaClientes');
            agregarEventosEdicionSelect('tablaClientes');
        }

        // Agregar fila vacía para cliente
        function agregarFilaCliente() {
            const tbody = document.querySelector('#tablaClientes tbody');
            const row = document.createElement('tr');
            row.classList.add('new-row');
            row.innerHTML = `
                <td class="editable-text" data-field="nombre"><input type="text" placeholder="Nombre"></td>
                <td class="editable-text" data-field="apellido"><input type="text" placeholder="Apellido"></td>
                <td class="editable-text" data-field="telefono"><input type="text" placeholder="Teléfono"></td>
                <td class="editable-text" data-field="email"><input type="text" placeholder="Email"></td>
                <td class="editable-select" data-field="tipo">
                    <div class="edit-container">
                        <select>
                            <option value="interesado">Interesado</option>
                            <option value="propietario">Propietario</option>
                        </select>
                    </div>
                </td>
                <td class="editable-text" data-field="rango_min"><input type="number" placeholder="Min"></td>
                <td class="editable-text" data-field="rango_max"><input type="number" placeholder="Max"></td>
                <td><input type="checkbox" data-field="es_usd"></td>
                <td class="editable-text" data-field="ambientes"><input type="number" placeholder="Amb"></td>
                <td class="editable-select" data-field="operacion">
                    <div class="edit-container">
                        <select>
                            <option value="venta">Venta</option>
                            <option value="renta">Renta</option>
                            <option value="ambas">Ambas</option>
                        </select>
                    </div>
                </td>
                <td>
                    <button class="btn-action btn-save" onclick="guardarNuevoCliente(this)">✔</button>
                    <button class="btn-action btn-cancel" onclick="this.parentElement.parentElement.remove()">X</button>
                </td>
            `;
            tbody.insertBefore(row, tbody.firstChild);
        }

        // Guardar nuevo cliente
        function guardarNuevoCliente(button) {
            const row = button.parentElement.parentElement;
            const cliente = {
                nombre: row.querySelector('[data-field="nombre"] input').value,
                apellido: row.querySelector('[data-field="apellido"] input').value,
                telefono: row.querySelector('[data-field="telefono"] input').value,
                email: row.querySelector('[data-field="email"] input').value || null,
                tipo: row.querySelector('[data-field="tipo"] select').value,
                rango_min: parseFloat(row.querySelector('[data-field="rango_min"] input').value) || null,
                rango_max: parseFloat(row.querySelector('[data-field="rango_max"] input').value) || null,
                es_usd: row.querySelector('[data-field="es_usd"]').checked,
                ambientes: parseInt(row.querySelector('[data-field="ambientes"] input').value) || null,
                operacion: row.querySelector('[data-field="operacion"] select').value
            };
            if (!cliente.nombre || !cliente.apellido || !cliente.telefono) {
                alert('Completá Nombre, Apellido y Teléfono, loco!');
                return;
            }
            fetch('/api/clientes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cliente)
            })
            .then(response => response.json())
            .then(data => {
                cargarClientes();
                alert('Cliente agregado');
            })
            .catch(error => alert('Error: ' + error));
        }

        // Eliminar cliente
        function eliminarCliente(id) {
            if (confirm('¿Seguro querés borrar este cliente?')) {
                fetch(`/api/clientes/${id}`, { method: 'DELETE' })
                    .then(() => {
                        cargarClientes();
                        alert('Cliente borrado');
                    })
                    .catch(error => alert('Error: ' + error));
            }
        }

        // Edición de texto con doble clic
        function agregarEventosEdicionTexto(tablaId) {
            document.querySelectorAll(`#${tablaId} .editable-text`).forEach(cell => {
                cell.addEventListener('dblclick', function() {
                    if (this.querySelector('input')) return;
                    const id = this.dataset.id;
                    const field = this.dataset.field;
                    const oldValue = this.textContent;
                    const input = `<input type="${field.includes('rango') || field === 'ambientes' ? 'number' : 'text'}" value="${oldValue}">`;
                    this.innerHTML = input;
                    const inputElement = this.querySelector('input');
                    inputElement.focus();

                    inputElement.addEventListener('blur', function() {
                        const newValue = this.value.trim();
                        if (newValue !== oldValue) {
                            actualizarDato(id, field, field.includes('rango') || field === 'ambientes' ? parseFloat(newValue) || null : newValue, tablaId);
                        } else {
                            cell.textContent = oldValue;
                        }
                    });

                    inputElement.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            this.blur();
                        }
                    });
                });
            });
        }

        // Edición de selects con clic simple
        function agregarEventosEdicionTexto(tablaId) {
            document.querySelectorAll(`#${tablaId} .editable-text`).forEach(cell => {
                cell.addEventListener('dblclick', function(e) {
                    if (this.querySelector('input') || e.target.tagName === 'A') return;
                    const id = this.dataset.id;
                    const field = this.dataset.field;
                    const oldValue = field === 'nombre' ? this.textContent.trim() : this.textContent;
                    const input = `<input type="${field.includes('rango') || field === 'ambientes' ? 'number' : 'text'}" value="${oldValue}">`;
                    this.innerHTML = input;
                    const inputElement = this.querySelector('input');
                    inputElement.focus();

                    inputElement.addEventListener('blur', function() {
                        const newValue = this.value.trim();
                        if (newValue !== oldValue) {
                            if (field === 'nombre') {
                                const [nombre, ...apellidoParts] = newValue.split(' ');
                                const apellido = apellidoParts.join(' ');
                                actualizarDato(id, 'nombre', nombre, tablaId);
                                if (apellido) actualizarDato(id, 'apellido', apellido, tablaId);
                            } else {
                                actualizarDato(id, field, field.includes('rango') || field === 'ambientes' ? parseFloat(newValue) || null : newValue, tablaId);
                            }
                        } else {
                            cell.innerHTML = `<a href="/cliente/${id}">${oldValue}</a>`;
                        }
                    });

                    inputElement.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') this.blur();
                    });
                });
            });
        }

        // Guardar valor del select
        function guardarSelect(id, field, selectElement, tablaId) {
            const newValue = selectElement.value;
            const oldValue = clientes.find(c => c.id == id)[field];
            if (newValue !== oldValue) {
                actualizarDato(id, field, newValue, tablaId);
            } else {
                const cell = selectElement.parentElement.parentElement;
                cell.textContent = newValue;
            }
        }

        // Actualizar dato
        function actualizarDato(id, field, value, tablaId) {
            const data = clientes.find(c => c.id == id);
            if (field === 'rango_min' || field === 'rango_max' || field === 'ambientes') {
                data[field] = value ? parseFloat(value) : null;
            } else {
                data[field] = value;
            }
            delete data.id;
            fetch(`/api/clientes/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(() => {
                cargarClientes();
            })
            .catch(error => alert('Error: ' + error));
        }

        function imprimirTabla() {
            const tabla = document.getElementById('tablaClientes').outerHTML;
            const filtros = `
                <p>Filtros aplicados: 
                    Nombre/Apellido: ${document.getElementById('filtroTexto').value || 'Ninguno'}, 
                    Operación: ${document.getElementById('filtroOperacion').value || 'Ninguno'}, 
                    Ambientes: ${document.getElementById('filtroAmbientes').value || 'Ninguno'}
                </p>
            `;
            const ventanaImpresion = window.open('', '_blank');
            ventanaImpresion.document.write(`
                <html>
                <head>
                    <title>Gestión Clientes - Impresión</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        table { width: 100%; border-collapse: collapse; font-size: 12px; }
                        th, td { border: 1px solid #ccc; padding: 4px; text-align: left; }
                        th { background-color: #e0e0e0; font-weight: bold; }
                        a { text-decoration: none; color: black; }
                    </style>
                </head>
                <body>
                    <h1>Gestión Clientes</h1>
                    ${filtros}
                    ${tabla}
                </body>
                </html>
            `);
            ventanaImpresion.document.close();
            ventanaImpresion.print();
        }

        // Iniciar
        document.addEventListener('DOMContentLoaded', () => {
            cargarClientes();
        });
    </script>
</body>
</html>

--- File: .\templates\perfil.html ---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Perfil de Cliente</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 800px; margin: 0 auto; }
        h1 { font-size: 24px; }
        textarea { width: 100%; height: 100px; }
        .fotos { margin-top: 20px; }
        .fotos img { max-width: 200px; margin: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Perfil de Cliente</h1>
        <div id="cliente-info"></div>
        <label>Descripción:</label>
        <textarea id="descripcion"></textarea>
        <button onclick="guardarDescripcion()">Guardar</button>
        <div>
            <input type="file" id="foto" accept=".jpg,.jpeg">
            <button onclick="subirFoto()">Subir Foto</button>
        </div>
        <div class="fotos" id="fotos"></div>
        <a href="/">Volver</a>
    </div>

    <script>
        const clienteId = {{ cliente_id }};

        function cargarPerfil() {
            fetch(`/api/clientes/${clienteId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('cliente-info').innerHTML = `
                        <p><strong>Nombre:</strong> ${data.nombre} ${data.apellido}</p>
                        <p><strong>Teléfono:</strong> ${data.telefono}</p>
                        <p><strong>Email:</strong> ${data.email || '-'}</p>
                        <p><strong>Tipo:</strong> ${data.tipo}</p>
                    `;
                    document.getElementById('descripcion').value = data.descripcion || '';
                    const fotosDiv = document.getElementById('fotos');
                    fotosDiv.innerHTML = '';
                    data.fotos.forEach(foto => {
                        const img = document.createElement('img');
                        img.src = `/${foto}`;
                        fotosDiv.appendChild(img);
                    });
                });
        }

        function guardarDescripcion() {
            const descripcion = document.getElementById('descripcion').value;
            fetch(`/api/clientes/${clienteId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ descripcion })
            })
            .then(() => alert('Descripción guardada'))
            .catch(error => alert('Error: ' + error));
        }

        function subirFoto() {
            const fileInput = document.getElementById('foto');
            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            fetch(`/api/clientes/${clienteId}/upload`, {
                method: 'POST',
                body: formData
            })
            .then(() => {
                cargarPerfil();
                fileInput.value = '';
            })
            .catch(error => alert('Error: ' + error));
        }

        document.addEventListener('DOMContentLoaded', cargarPerfil);
    </script>
</body>
</html>
